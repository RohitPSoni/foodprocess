plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.example.orders"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
    testOptions.unitTests {
        all {
            jacoco {
                useJUnitPlatform {
                    includeEngines 'junit-vintage', 'junit-jupiter'
                }
            }
            failFast = false
            jvmArgs "-Xmx2g"
            returnDefaultValues = true
        }
    }
}

dependencies {

    def koin_version = '3.1.2'
    def gson_version = '2.8.6'
    def retrofit_gson_version = '2.7.1'
    def retrofit_version = '2.8.1'
    def lifecycle_version = '2.2.0'
    def navigation_version = '2.3.5'
    def multidex_version = "2.0.1"
    def junit_version = '5.7.1'
    def mockito_kotlin_version = '3.10.0'
    def rxjava_version = '3.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.cardview:cardview:1.0.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    //Koin
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-core:$koin_version"

    //Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // network & serialization
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_gson_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    //RxJava
    implementation "io.reactivex.rxjava3:rxandroid:$rxjava_version"
    implementation "io.reactivex.rxjava3:rxjava:$rxjava_version"
    implementation 'com.jakewharton.rxbinding:rxbinding:1.0.1'

    implementation "androidx.multidex:multidex:$multidex_version"

    //test
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_kotlin_version"
}

jacoco {
    toolVersion = "0.8.6"
}

task JacocoReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*',
                      'android/databinding/**/*.class',
                      '**/android/databinding/*Binding.class',
                      '**/android/databinding/*',
                      '**/androidx/databinding/*',
                      '**/BR.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
        "jacoco/testDebugUnitTest.exec",
        "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
